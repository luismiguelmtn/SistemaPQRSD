#!/usr/bin/env python3
"""
Script de despliegue para el Sistema PQRSD
Ejecuta la secuencia completa de comandos Docker y Alembic
Opcionalmente puede agregar casos de ejemplo
"""

import subprocess
import sys
import os
import time
import psycopg2
from pathlib import Path
from dotenv import load_dotenv

def run_command(command, description):
    """
    Ejecuta un comando y maneja errores
    """
    print(f"\nüîÑ {description}...")
    print(f"Ejecutando: {command}")
    
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            check=True, 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent  # Ejecutar desde la ra√≠z del proyecto
        )
        
        if result.stdout:
            print(f"‚úÖ Salida: {result.stdout.strip()}")
        
        print(f"‚úÖ {description} completado exitosamente")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en {description}")
        print(f"C√≥digo de salida: {e.returncode}")
        if e.stdout:
            print(f"Salida est√°ndar: {e.stdout}")
        if e.stderr:
            print(f"Error est√°ndar: {e.stderr}")
        return False

def wait_for_database(max_attempts=30, delay=2):
    """
    Espera a que la base de datos PostgreSQL est√© disponible
    """
    print(f"\n‚è≥ Esperando a que la base de datos est√© disponible...")
    
    # Cargar variables de entorno
    load_dotenv()
    
    # Configuraci√≥n de la base de datos desde variables de entorno
    db_config = {
        'host': os.getenv('DB_HOST', 'localhost'),
        'port': os.getenv('DB_PORT', '5432'),
        'database': os.getenv('DB_NAME', 'pqrsd_db'),
        'user': os.getenv('DB_USER', 'postgres'),
        'password': os.getenv('DB_PASSWORD', 'postgres')
    }
    
    for attempt in range(1, max_attempts + 1):
        try:
            print(f"üîç Intento {attempt}/{max_attempts} - Conectando a la base de datos...")
            
            # Intentar conectar a la base de datos
            conn = psycopg2.connect(**db_config)
            conn.close()
            
            print("‚úÖ Base de datos disponible y lista para usar")
            return True
            
        except psycopg2.OperationalError as e:
            if attempt < max_attempts:
                print(f"‚è±Ô∏è  Base de datos no disponible a√∫n, esperando {delay} segundos...")
                time.sleep(delay)
            else:
                print(f"‚ùå No se pudo conectar a la base de datos despu√©s de {max_attempts} intentos")
                print(f"Error: {e}")
                return False
        except Exception as e:
            print(f"‚ùå Error inesperado al conectar a la base de datos: {e}")
            return False
    
    return False

def insertar_casos_ejemplo(cantidad_casos):
    """
    Ejecuta el script de insertar casos ejemplo
    """
    print(f"\nüìù Insertando {cantidad_casos} casos de ejemplo...")
    
    success = run_command(
        f"python -m tests.fixtures.insertar_casos_ejemplo {cantidad_casos}",
        f"Insertando {cantidad_casos} casos de ejemplo en la base de datos"
    )
    
    return success

def validar_argumentos():
    """
    Valida y procesa los argumentos de l√≠nea de comandos
    
    Returns:
        int or None: N√∫mero de casos a insertar, o None si no se especific√≥
    """
    if len(sys.argv) <= 1:
        return None
    
    try:
        cantidad = int(sys.argv[1])
        if cantidad <= 0:
            print("‚ùå Error: El n√∫mero de casos debe ser mayor que 0")
            print("üí° Uso: python -m tests.reset_db [n√∫mero_de_casos]")
            print("   Ejemplos:")
            print("     python -m tests.reset_db        # Solo reinicio")
            print("     python -m tests.reset_db 50     # Reinicio + 50 casos")
            print("     python -m tests.reset_db 100    # Reinicio + 100 casos")
            sys.exit(1)
        return cantidad
    except ValueError:
        print("‚ùå Error: El argumento debe ser un n√∫mero entero")
        print("üí° Uso: python -m tests.reset_db [n√∫mero_de_casos]")
        print("   Ejemplos:")
        print("     python -m tests.reset_db        # Solo reinicio")
        print("     python -m tests.reset_db 50     # Reinicio + 50 casos")
        print("     python -m tests.reset_db 100    # Reinicio + 100 casos")
        sys.exit(1)

def main():
    """
    Funci√≥n principal que ejecuta la secuencia de despliegue
    """
    # Validar argumentos
    cantidad_casos = validar_argumentos()
    
    if cantidad_casos:
        print("üöÄ Iniciando proceso de reinicio de base de datos con casos de ejemplo")
        print(f"üìä Se insertar√°n {cantidad_casos} casos de ejemplo despu√©s del reinicio")
    else:
        print("üöÄ Iniciando proceso de reinicio de base de datos")
        print("üìã Solo se realizar√° el reinicio sin casos de ejemplo")
    
    print("=" * 70)
    
    # Verificar que estamos en el directorio correcto
    project_root = Path(__file__).parent.parent
    if not (project_root / "docker-compose.yml").exists():
        print("‚ùå Error: No se encontr√≥ docker-compose.yml en el directorio del proyecto")
        sys.exit(1)
    
    # Cambiar al directorio del proyecto
    os.chdir(project_root)
    print(f"üìÅ Directorio de trabajo: {project_root.absolute()}")
    
    # Paso 1: Detener contenedores
    success = run_command(
        "docker compose down -v",
        "Deteniendo y eliminando contenedores con vol√∫menes"
    )
    if not success:
        print("\n‚ùå El proceso fall√≥ al detener contenedores")
        sys.exit(1)
    
    # Paso 2: Iniciar servicios
    success = run_command(
        "docker compose up -d",
        "Iniciando servicios en segundo plano"
    )
    if not success:
        print("\n‚ùå El proceso fall√≥ al iniciar servicios")
        sys.exit(1)
    
    # Paso 3: Esperar a que la base de datos est√© lista
    if not wait_for_database():
        print("\n‚ùå El proceso fall√≥: la base de datos no est√° disponible")
        print("üí° Sugerencias:")
        print("   ‚Ä¢ Verifica que Docker est√© ejecut√°ndose")
        print("   ‚Ä¢ Revisa las variables de entorno en el archivo .env")
        print("   ‚Ä¢ Ejecuta 'docker compose logs db' para ver los logs de la base de datos")
        sys.exit(1)
    
    # Paso 4: Aplicar migraciones
    success = run_command(
        "alembic upgrade head",
        "Aplicando migraciones de base de datos"
    )
    if not success:
        print("\n‚ùå El proceso fall√≥ al aplicar migraciones")
        print("üí° Sugerencias:")
        print("   ‚Ä¢ Verifica la configuraci√≥n de Alembic en alembic.ini")
        print("   ‚Ä¢ Revisa las variables de entorno de la base de datos")
        print("   ‚Ä¢ Ejecuta 'alembic current' para ver el estado actual")
        sys.exit(1)
    
    # Paso 5: Insertar casos de ejemplo (opcional)
    if cantidad_casos:
        success = insertar_casos_ejemplo(cantidad_casos)
        if not success:
            print(f"\n‚ö†Ô∏è  El reinicio fue exitoso pero fall√≥ la inserci√≥n de casos de ejemplo")
            print("üí° Puedes intentar insertar los casos manualmente con:")
            print(f"   python -m tests.fixtures.insertar_casos_ejemplo {cantidad_casos}")
        else:
            print(f"\n‚úÖ Se insertaron {cantidad_casos} casos de ejemplo exitosamente")
    
    print("\n" + "=" * 70)
    print("üéâ ¬°Proceso completado exitosamente!")
    print("üìã Resumen de acciones realizadas:")
    print("   ‚Ä¢ Contenedores Docker detenidos y vol√∫menes eliminados")
    print("   ‚Ä¢ Servicios Docker iniciados en segundo plano")
    print("   ‚Ä¢ Base de datos verificada y disponible")
    print("   ‚Ä¢ Migraciones de base de datos aplicadas")
    
    if cantidad_casos:
        print(f"   ‚Ä¢ {cantidad_casos} casos de ejemplo insertados")
    
    print("\nüí° El sistema est√° listo para usar")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Proceso interrumpido por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)