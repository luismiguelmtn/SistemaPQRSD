# -*- coding: utf-8 -*-
"""
Modelos de Base de Datos para el Sistema PQRSD

Este archivo define las tablas de la base de datos usando SQLAlchemy.

¬øCu√°l es la diferencia entre models.py y db_models.py?

- models.py (Pydantic): Define la estructura de datos para la API
  - Validaci√≥n de entrada/salida
  - Serializaci√≥n JSON
  - Documentaci√≥n autom√°tica

- db_models.py (SQLAlchemy): Define la estructura de las tablas en la base de datos
  - Columnas y tipos de datos
  - Relaciones entre tablas
  - √çndices y restricciones

¬øPor qu√© dos archivos separados?
- Separaci√≥n de responsabilidades
- La API puede tener campos diferentes a la base de datos
- Flexibilidad para cambios independientes
- Mejor organizaci√≥n del c√≥digo

Analogia:
- Pydantic = El formulario que llena el usuario
- SQLAlchemy = La tabla donde se guardan los datos
"""

from sqlalchemy import Column, Integer, String, Text, DateTime, Enum as SQLEnum
from sqlalchemy.sql import func
from datetime import datetime

# Importar la configuraci√≥n de base de datos
from database import Base
from enums import TipoCaso, EstadoCaso

# ============================================================================
# MODELO DE TABLA: CASOS
# ============================================================================

class Caso(Base):
    """
    Modelo de base de datos para la tabla 'casos'.
    
    Esta clase define c√≥mo se estructura la tabla en la base de datos.
    Cada atributo representa una columna en la tabla.
    
    ¬øQu√© significa cada parte?
    
    - __tablename__: Nombre de la tabla en la base de datos
    - Column: Define una columna en la tabla
    - Integer, String, Text: Tipos de datos
    - primary_key: Clave primaria (identificador √∫nico)
    - nullable: Si puede ser NULL (vac√≠o) o no
    - index: Si se debe crear un √≠ndice para b√∫squedas r√°pidas
    - unique: Si el valor debe ser √∫nico en toda la tabla
    """
    
    # Nombre de la tabla en la base de datos
    __tablename__ = "casos"
    
    # ========================================================================
    # COLUMNAS DE LA TABLA
    # ========================================================================
    
    # ID √∫nico interno (clave primaria)
    # Se auto-incrementa autom√°ticamente: 1, 2, 3, 4...
    id = Column(
        Integer,
        primary_key=True,  # Es la clave primaria
        index=True,        # Crear √≠ndice para b√∫squedas r√°pidas
        comment="Identificador √∫nico interno del caso"
    )
    
    # N√∫mero de caso p√∫blico (legible para humanos)
    # Ejemplo: "CASO-2024-001", "PET-2024-001"
    numero_caso = Column(
        String(50),        # M√°ximo 50 caracteres
        unique=True,       # Debe ser √∫nico en toda la tabla
        nullable=False,    # No puede ser NULL (obligatorio)
        index=True,        # √çndice para b√∫squedas r√°pidas
        comment="N√∫mero de caso √∫nico y legible para el p√∫blico"
    )
    
    # Tipo de caso (petici√≥n, queja, reclamo, sugerencia, denuncia)
    # Usamos SQLEnum para restringir a valores espec√≠ficos
    tipo = Column(
        SQLEnum(TipoCaso),  # Solo acepta valores del enum TipoCaso
        nullable=False,     # Obligatorio
        index=True,         # √çndice para filtrar por tipo
        comment="Tipo de caso PQRSD"
    )
    
    # Asunto o t√≠tulo del caso
    # String(200) = m√°ximo 200 caracteres
    asunto = Column(
        String(200),
        nullable=False,
        comment="T√≠tulo o asunto del caso"
    )
    
    # Descripci√≥n detallada del caso
    # Text = texto largo sin l√≠mite espec√≠fico
    descripcion = Column(
        Text,
        nullable=False,
        comment="Descripci√≥n detallada del caso"
    )
    
    # Informaci√≥n del solicitante
    nombre_solicitante = Column(
        String(100),
        nullable=False,
        comment="Nombre completo del solicitante"
    )
    
    email_solicitante = Column(
        String(255),        # Los emails pueden ser largos
        nullable=False,
        index=True,         # √çndice para buscar por email
        comment="Email del solicitante"
    )
    
    telefono_solicitante = Column(
        String(15),
        nullable=True,      # Es opcional (puede ser NULL)
        comment="Tel√©fono de contacto del solicitante"
    )
    
    # Estado del caso
    estado = Column(
        SQLEnum(EstadoCaso),
        nullable=False,
        default=EstadoCaso.RECIBIDO,  # Valor por defecto
        index=True,                   # √çndice para filtrar por estado
        comment="Estado actual del caso"
    )
    
    # Respuesta oficial (opcional)
    respuesta = Column(
        Text,
        nullable=True,      # Opcional hasta que se responda
        comment="Respuesta oficial al caso"
    )
    
    # ========================================================================
    # CAMPOS DE AUDITOR√çA (TIMESTAMPS)
    # ========================================================================
    
    # Fecha de creaci√≥n
    # func.now() = funci√≥n SQL que obtiene la fecha/hora actual
    # server_default = se ejecuta en el servidor de base de datos
    fecha_creacion = Column(
        DateTime,
        nullable=False,
        server_default=func.now(),  # Se asigna autom√°ticamente al crear
        comment="Fecha y hora de creaci√≥n del caso"
    )
    
    # Fecha de √∫ltima actualizaci√≥n
    # Se actualiza autom√°ticamente cada vez que se modifica el registro
    fecha_actualizacion = Column(
        DateTime,
        nullable=False,
        server_default=func.now(),  # Valor inicial
        onupdate=func.now(),        # Se actualiza autom√°ticamente
        comment="Fecha y hora de la √∫ltima actualizaci√≥n"
    )
    
    # ========================================================================
    # M√âTODOS DE LA CLASE
    # ========================================================================
    
    def __repr__(self):
        """
        Representaci√≥n en string del objeto para debugging.
        
        Esto es lo que ver√°s cuando imprimas un objeto Caso:
        print(caso) -> <Caso(id=1, numero='CASO-2024-001', tipo='peticion')>
        """
        return f"<Caso(id={self.id}, numero='{self.numero_caso}', tipo='{self.tipo}')>"
    
    def to_dict(self):
        """
        Convierte el objeto SQLAlchemy a un diccionario.
        
        Esto es √∫til para:
        - Convertir a JSON
        - Pasar datos a los modelos Pydantic
        - Debugging y logging
        
        Returns:
            dict: Diccionario con todos los campos del caso
        """
        return {
            "id": self.id,
            "numero_caso": self.numero_caso,
            "tipo": self.tipo,
            "asunto": self.asunto,
            "descripcion": self.descripcion,
            "nombre_solicitante": self.nombre_solicitante,
            "email_solicitante": self.email_solicitante,
            "telefono_solicitante": self.telefono_solicitante,
            "estado": self.estado,
            "respuesta": self.respuesta,
            "fecha_creacion": self.fecha_creacion,
            "fecha_actualizacion": self.fecha_actualizacion
        }
    
    @classmethod
    def from_pydantic(cls, caso_data, numero_caso: str):
        """
        Crea un objeto Caso desde un modelo Pydantic CasoCreate.
        
        Args:
            caso_data: Objeto CasoCreate de Pydantic
            numero_caso: N√∫mero √∫nico generado para el caso
            
        Returns:
            Caso: Nueva instancia de Caso para guardar en la base de datos
        """
        return cls(
            numero_caso=numero_caso,
            tipo=caso_data.tipo,
            asunto=caso_data.asunto,
            descripcion=caso_data.descripcion,
            nombre_solicitante=caso_data.nombre_solicitante,
            email_solicitante=caso_data.email_solicitante,
            telefono_solicitante=caso_data.telefono_solicitante,
            estado=EstadoCaso.RECIBIDO  # Estado inicial
        )

# ============================================================================
# INFORMACI√ìN PARA DEBUGGING
# ============================================================================

if __name__ == "__main__":
    # Este c√≥digo solo se ejecuta si ejecutas este archivo directamente
    # python db_models.py
    
    print("üóÑÔ∏è Modelos de Base de Datos")
    print(f"üìã Tabla: {Caso.__tablename__}")
    print(f"üîë Columnas: {list(Caso.__table__.columns.keys())}")
    
    # Mostrar informaci√≥n de cada columna
    print("\nüìä Detalles de columnas:")
    for column in Caso.__table__.columns:
        print(f"  - {column.name}: {column.type} (nullable={column.nullable})")