# app/routers/caso.py - API REST del Sistema PQRSD con PostgreSQL
"""
üõ£Ô∏è Definici√≥n de Endpoints REST para el Sistema PQRSD

Este archivo contiene todos los endpoints de la API REST, optimizados para
funcionar con PostgreSQL y proporcionar una interfaz robusta y escalable.

üöÄ CARACTER√çSTICAS DE LA API:
‚úì Endpoints RESTful est√°ndar
‚úì Validaci√≥n autom√°tica con Pydantic
‚úì Documentaci√≥n autom√°tica (Swagger)
‚úì Manejo de errores HTTP est√°ndar
‚úì Filtros avanzados en consultas
‚úì Respuestas consistentes en JSON
‚úì Operaciones CRUD completas

üìä ENDPOINTS DISPONIBLES:

üè† INFORMACI√ìN GENERAL:
- GET /                     ‚Üí Informaci√≥n del sistema
- GET /estadisticas/        ‚Üí M√©tricas y estad√≠sticas

üìã GESTI√ìN DE CASOS:
- POST /casos/              ‚Üí Crear nuevo caso
- GET /casos/               ‚Üí Listar casos (con filtros)
- GET /casos/{caso_id}      ‚Üí Obtener caso por ID interno
- GET /casos/numero/{num}   ‚Üí Obtener caso por n√∫mero p√∫blico
- PUT /casos/{caso_id}      ‚Üí Actualizar caso existente

üîç FILTROS DISPONIBLES:
- ?tipo=PETICION|QUEJA|RECLAMO|SUGERENCIA|DENUNCIA
- ?estado=RECIBIDO|EN_PROCESO|RESUELTO|CERRADO

üìà OPTIMIZACIONES POSTGRESQL:
- Consultas con √≠ndices optimizados
- Transacciones ACID autom√°ticas
- Pool de conexiones para concurrencia
- Agregaciones eficientes para estad√≠sticas
- B√∫squedas r√°pidas por n√∫mero de caso

üîí C√ìDIGOS DE RESPUESTA HTTP:
- 200: Operaci√≥n exitosa
- 201: Recurso creado
- 400: Datos inv√°lidos
- 404: Recurso no encontrado
- 422: Error de validaci√≥n
- 500: Error interno del servidor
"""

from fastapi import APIRouter
from typing import Optional, List

# Importamos nuestros m√≥dulos personalizados
from app.core.enums import TipoCaso, EstadoCaso
from app.schemas.caso import CasoCreate, CasoResponse, CasoUpdate
from app.services.caso import (
    crear_nuevo_caso,
    obtener_casos_filtrados,
    obtener_caso_por_id,
    obtener_caso_por_numero,
    actualizar_caso_existente,
    obtener_estadisticas_sistema
)

# ============================================================================
# CONFIGURACI√ìN DEL ROUTER
# ============================================================================

# Crear el router principal
# Un APIRouter es como un mini-aplicaci√≥n que agrupa rutas relacionadas
router = APIRouter()


# ============================================================================
# ENDPOINTS DE LA API
# ============================================================================

@router.get("/")
def root():
    """
    Endpoint ra√≠z - P√°gina de bienvenida de la API
    
    ¬øQu√© hace este endpoint?
    - Proporciona informaci√≥n b√°sica sobre la API
    - Es √∫til para verificar que el servidor est√° funcionando
    - Indica d√≥nde encontrar la documentaci√≥n autom√°tica
    
    M√©todo HTTP: GET
    URL: http://localhost:8000/
    
    Respuesta:
    {
        "mensaje": "Bienvenido al Sistema PQRSD",
        "version": "1.0.0", 
        "documentacion": "/docs"
    }
    """
    return {
        "mensaje": "Bienvenido al Sistema PQRSD", 
        "version": "1.0.0",
        "documentacion": "/docs"
    }


@router.post("/casos/", response_model=CasoResponse)
def crear_caso(caso: CasoCreate):
    """
    Crear un nuevo caso PQRSD
    
    ¬øQu√© hace este endpoint?
    - Recibe los datos de un nuevo caso desde el cliente
    - Valida que los datos sean correctos usando el modelo CasoCreate
    - Crea el caso en el sistema y le asigna un ID √∫nico
    - Devuelve los datos del caso creado incluyendo el ID y n√∫mero de caso
    
    M√©todo HTTP: POST (usado para crear nuevos recursos)
    URL: http://localhost:8000/casos/
    
    Par√°metros:
    - caso (CasoCreate): Datos del caso a crear (enviados en el cuerpo de la petici√≥n)
    
    ¬øQu√© es response_model?
    Le dice a FastAPI qu√© estructura tendr√° la respuesta. Esto:
    - Valida que devolvamos los datos correctos
    - Genera documentaci√≥n autom√°tica
    - Convierte los datos al formato JSON apropiado
    
    Ejemplo de uso:
    POST /casos/
    {
        "tipo": "peticion",
        "descripcion": "Solicito informaci√≥n sobre...",
        "email_solicitante": "usuario@email.com"
    }
    """
    return crear_nuevo_caso(caso)


@router.get("/casos/", response_model=List[CasoResponse])
def listar_casos(tipo: Optional[TipoCaso] = None, estado: Optional[EstadoCaso] = None):
    """
    Listar casos con filtros opcionales
    
    ¬øQu√© hace este endpoint?
    - Devuelve una lista de todos los casos en el sistema
    - Permite filtrar por tipo de caso (petici√≥n, queja, reclamo, sugerencia)
    - Permite filtrar por estado (pendiente, en_proceso, resuelto, cerrado)
    - Si no se especifican filtros, devuelve todos los casos
    
    M√©todo HTTP: GET (usado para obtener/leer datos)
    URL: http://localhost:8000/casos/
    
    Par√°metros de consulta (query parameters):
    - tipo (opcional): Filtra por tipo de caso
    - estado (opcional): Filtra por estado del caso
    
    ¬øQu√© significa Optional?
    Optional[TipoCaso] significa que el par√°metro 'tipo' puede ser:
    - Un valor del enum TipoCaso (peticion, queja, reclamo, sugerencia)
    - None (si no se proporciona)
    
    ¬øQu√© es List[CasoResponse]?
    Indica que la respuesta ser√° una lista (array) de objetos CasoResponse.
    
    Ejemplos de uso:
    - GET /casos/ (todos los casos)
    - GET /casos/?tipo=peticion (solo peticiones)
    - GET /casos/?estado=pendiente (solo casos pendientes)
    - GET /casos/?tipo=queja&estado=resuelto (quejas resueltas)
    """
    return obtener_casos_filtrados(tipo, estado)


@router.get("/casos/{caso_id}", response_model=CasoResponse)
def obtener_caso(caso_id: str):
    """
    Obtener un caso espec√≠fico por ID
    
    ¬øQu√© hace este endpoint?
    - Busca y devuelve un caso espec√≠fico usando su ID √∫nico
    - Si el caso no existe, devuelve un error 404
    
    M√©todo HTTP: GET
    URL: http://localhost:8000/casos/{caso_id}
    
    Par√°metros de ruta (path parameters):
    - caso_id (str): El ID √∫nico del caso que queremos obtener
    
    ¬øQu√© son los par√°metros de ruta?
    Los par√°metros de ruta son partes variables de la URL que se indican
    con llaves {}. En este caso, {caso_id} ser√° reemplazado por el ID real.
    
    Ejemplo de uso:
    GET /casos/123e4567-e89b-12d3-a456-426614174000
    
    Nota para principiantes:
    Este endpoint es √∫til cuando necesitas los detalles completos de un caso
    espec√≠fico, por ejemplo, para mostrar una p√°gina de detalles del caso.
    """
    return obtener_caso_por_id(caso_id)


@router.get("/casos/numero/{numero_caso}", response_model=CasoResponse) 
def obtener_caso_por_numero_endpoint(numero_caso: str):
    """
    Obtener un caso por su n√∫mero (para consulta p√∫blica)
    
    ¬øQu√© hace este endpoint?
    - Permite buscar un caso usando su n√∫mero p√∫blico (ej: "CASO-001")
    - Es m√°s amigable para usuarios finales que el ID interno
    - √ötil para que los ciudadanos consulten el estado de sus casos
    
    M√©todo HTTP: GET
    URL: http://localhost:8000/casos/numero/{numero_caso}
    
    Par√°metros de ruta:
    - numero_caso (str): El n√∫mero p√∫blico del caso (ej: "CASO-202X-001")
    
    ¬øPor qu√© dos formas de buscar casos?
    - Por ID: Para uso interno del sistema (m√°s eficiente)
    - Por n√∫mero: Para uso p√∫blico (m√°s f√°cil de recordar y compartir)
    
    Ejemplo de uso:
    GET /casos/numero/CASO-001
    
    Nota para principiantes:
    Este endpoint es especialmente √∫til para crear una p√°gina de consulta
    p√∫blica donde los ciudadanos pueden verificar el estado de sus casos
    sin necesidad de recordar un ID complejo.
    """
    return obtener_caso_por_numero(numero_caso)


@router.put("/casos/{caso_id}", response_model=CasoResponse)
def actualizar_caso(caso_id: str, actualizacion: CasoUpdate):
    """
    Actualizar el estado o respuesta de un caso
    
    ¬øQu√© hace este endpoint?
    - Permite modificar un caso existente
    - Principalmente usado para cambiar el estado o agregar respuestas
    - Solo actualiza los campos que se env√≠an (actualizaci√≥n parcial)
    
    M√©todo HTTP: PUT (usado para actualizar recursos existentes)
    URL: http://localhost:8000/casos/{caso_id}
    
    Par√°metros:
    - caso_id (str): ID del caso a actualizar (en la URL)
    - actualizacion (CasoUpdate): Datos a actualizar (en el cuerpo de la petici√≥n)
    
    ¬øQu√© es CasoUpdate?
    Es un modelo que define qu√© campos se pueden actualizar.
    Todos los campos son opcionales, solo se actualizan los que se env√≠an.
    
    ¬øPor qu√© PUT y no POST?
    - POST: Para crear nuevos recursos
    - PUT: Para actualizar recursos existentes
    - GET: Para obtener/leer datos
    - DELETE: Para eliminar recursos
    
    Ejemplo de uso:
    PUT /casos/123e4567-e89b-12d3-a456-426614174000
    {
        "estado": "resuelto",
        "respuesta": "Su solicitud ha sido procesada exitosamente."
    }
    
    Nota para principiantes:
    Este endpoint es t√≠picamente usado por administradores o personal
    autorizado para actualizar el estado de los casos y proporcionar respuestas.
    """
    return actualizar_caso_existente(caso_id, actualizacion)


@router.get("/estadisticas/")
def obtener_estadisticas():
    """
    Obtener estad√≠sticas b√°sicas del sistema
    
    ¬øQu√© hace este endpoint?
    - Proporciona un resumen estad√≠stico del sistema PQRSD
    - Muestra conteos por tipo de caso y estado
    - √ötil para dashboards y reportes administrativos
    
    M√©todo HTTP: GET
    URL: http://localhost:8000/estadisticas/
    
    No requiere par√°metros.
    
    Respuesta t√≠pica:
    {
        "total_casos": 150,
        "por_tipo": {
            "peticion": 45,
            "queja": 30,
            "reclamo": 25,
            "sugerencia": 50
        },
        "por_estado": {
            "pendiente": 20,
            "en_proceso": 35,
            "resuelto": 80,
            "cerrado": 15
        }
    }
    
    Nota para principiantes:
    Este endpoint es muy √∫til para crear dashboards administrativos
    que muestren el estado general del sistema y ayuden en la toma
    de decisiones sobre la gesti√≥n de casos.
    """
    return obtener_estadisticas_sistema()