#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Inicializaci√≥n de Base de Datos PostgreSQL
Sistema PQRSD - Peticiones, Quejas, Reclamos, Sugerencias y Denuncias

Este script se encarga de:
1. Verificar conectividad a PostgreSQL
2. Crear todas las tablas necesarias en PostgreSQL
3. Configurar √≠ndices y restricciones
4. Opcionalmente insertar datos de prueba realistas
5. Validar la integridad de la base de datos

¬øCu√°ndo usar este script?
- La primera vez que configuras el proyecto con PostgreSQL
- Cuando quieres resetear la base de datos en desarrollo
- Para crear una base de datos limpia para testing
- Despu√©s de cambios en los modelos de datos

¬øC√≥mo ejecutar este script?
Desde la terminal/consola:

Configuraci√≥n inicial:
```bash
python init_db.py
```

Opciones avanzadas:
```bash
python init_db.py --reset          # Elimina y recrea todas las tablas
python init_db.py --sample-data    # Crea datos de ejemplo realistas
python init_db.py --reset --sample-data  # Resetea completamente con datos
python init_db.py --check          # Solo verifica el estado de la BD
python init_db.py --info           # Muestra informaci√≥n detallada
```

Requisitos previos:
1. PostgreSQL debe estar ejecut√°ndose
2. La base de datos debe existir (createdb pqrsd_sistema)
3. El usuario debe tener permisos CREATE/DROP
4. Variables de entorno configuradas (.env)
"""

import argparse
import sys
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any

# Importar nuestros m√≥dulos
from database import (
    create_tables, 
    drop_tables, 
    database_exists, 
    get_database_info,
    get_database_session,
    engine
)
from db_models import Caso
from enums import TipoCaso, EstadoCaso
from sqlalchemy import text

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def verificar_conectividad() -> bool:
    """
    Verifica la conectividad a PostgreSQL y muestra informaci√≥n del servidor.
    
    Returns:
        bool: True si la conexi√≥n es exitosa, False en caso contrario
    """
    logger.info("üîç Verificando conectividad a PostgreSQL...")
    
    try:
        with engine.connect() as connection:
            # Verificar conexi√≥n b√°sica
            result = connection.execute(text("SELECT 1"))
            if not result.fetchone():
                return False
            
            # Obtener informaci√≥n del servidor
            version_result = connection.execute(text("SELECT version()"))
            version = version_result.fetchone()[0]
            
            # Obtener informaci√≥n de la base de datos actual
            db_info_result = connection.execute(text(
                "SELECT current_database(), current_user, inet_server_addr(), inet_server_port()"
            ))
            db_info = db_info_result.fetchone()
            
            logger.info("‚úÖ Conectividad exitosa a PostgreSQL")
            logger.info(f"   üìã Base de datos: {db_info[0]}")
            logger.info(f"   üë§ Usuario: {db_info[1]}")
            logger.info(f"   üåê Servidor: {db_info[2] or 'localhost'}:{db_info[3] or 'N/A'}")
            logger.info(f"   üîß Versi√≥n: {version.split(',')[0]}")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Error de conectividad a PostgreSQL: {e}")
        logger.error("üí° Posibles soluciones:")
        logger.error("   1. Verificar que PostgreSQL est√© ejecut√°ndose")
        logger.error("   2. Verificar credenciales en el archivo .env")
        logger.error("   3. Verificar que la base de datos exista")
        logger.error("   4. Verificar permisos del usuario")
        return False

def crear_base_de_datos() -> bool:
    """
    Crea todas las tablas necesarias en PostgreSQL.
    
    Returns:
        bool: True si la creaci√≥n fue exitosa, False en caso contrario
    """
    logger.info("üîß Inicializando base de datos PostgreSQL...")
    
    # Verificar conectividad primero
    if not verificar_conectividad():
        return False
    
    # Verificar si las tablas ya existen
    try:
        with engine.connect() as connection:
            result = connection.execute(text(
                "SELECT COUNT(*) FROM information_schema.tables "
                "WHERE table_schema = 'public'"
            ))
            table_count = result.fetchone()[0]
            
            if table_count > 0:
                logger.info(f"‚ÑπÔ∏è  La base de datos ya tiene {table_count} tabla(s)")
                mostrar_estado_base_de_datos()
                return True
    
    except Exception as e:
        logger.error(f"Error verificando tablas existentes: {e}")
        return False
    
    # Crear las tablas
    try:
        create_tables()
        logger.info("‚úÖ Tablas creadas exitosamente en PostgreSQL")
        
        # Verificar creaci√≥n
        mostrar_estado_base_de_datos()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error creando tablas: {e}")
        return False

def resetear_base_de_datos() -> bool:
    """
    Elimina todas las tablas existentes y crea nuevas en PostgreSQL.
    
    ‚ö†Ô∏è CUIDADO: Esto elimina TODOS los datos y estructura.
    
    Returns:
        bool: True si el reseteo fue exitoso, False en caso contrario
    """
    logger.warning("‚ö†Ô∏è RESETEAR BASE DE DATOS POSTGRESQL")
    logger.warning("Esto eliminar√° TODOS los datos y tablas existentes.")
    
    # Verificar conectividad primero
    if not verificar_conectividad():
        return False
    
    # Pedir confirmaci√≥n
    try:
        respuesta = input("¬øEst√°s seguro? (escribe 'SI' para confirmar): ")
        if respuesta != "SI":
            logger.info("‚ùå Operaci√≥n cancelada por el usuario")
            return False
    except KeyboardInterrupt:
        logger.info("\n‚ùå Operaci√≥n cancelada por el usuario")
        return False
    
    try:
        logger.info("üóëÔ∏è Eliminando todas las tablas de PostgreSQL...")
        
        # Eliminar tablas si existen
        drop_tables()
        
        # Crear nuevas tablas
        logger.info("üîß Creando nuevas tablas en PostgreSQL...")
        create_tables()
        
        logger.info("‚úÖ Base de datos reseteada exitosamente")
        mostrar_estado_base_de_datos()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error durante el reseteo: {e}")
        return False

def crear_datos_de_ejemplo() -> bool:
    """
    Inserta datos de ejemplo realistas en PostgreSQL.
    
    Returns:
        bool: True si la inserci√≥n fue exitosa, False en caso contrario
    """
    logger.info("üìù Insertando datos de ejemplo en PostgreSQL...")
    
    # Datos de ejemplo m√°s realistas y variados
    casos_ejemplo = [
        {
            "numero_caso": "PET-2025-001",
            "tipo": TipoCaso.PETICION,
            "asunto": "Solicitud de informaci√≥n sobre licencias",
            "descripcion": "Necesito conocer los requisitos para obtener una licencia de funcionamiento para mi negocio de panader√≠a y los tiempos de respuesta estimados.",
            "nombre_solicitante": "Mar√≠a Elena Garc√≠a L√≥pez",
            "email_solicitante": "maria.garcia@email.com",
            "telefono_solicitante": "3001234567",
            "estado": EstadoCaso.RECIBIDO,
            "fecha_creacion": datetime.now() - timedelta(days=2)
        },
        {
            "numero_caso": "QUE-2025-002",
            "tipo": TipoCaso.QUEJA,
            "asunto": "Demora en atenci√≥n al p√∫blico",
            "descripcion": "El tiempo de espera en la oficina de atenci√≥n al ciudadano fue de m√°s de 2 horas para un tr√°mite simple. Solicito mejorar el servicio.",
            "nombre_solicitante": "Carlos Alberto Rodr√≠guez",
            "email_solicitante": "carlos.rodriguez@email.com",
            "telefono_solicitante": "3009876543",
            "estado": EstadoCaso.EN_PROCESO,
            "fecha_creacion": datetime.now() - timedelta(days=5)
        },
        {
            "numero_caso": "REC-2025-003",
            "tipo": TipoCaso.RECLAMO,
            "asunto": "Cobro indebido en factura",
            "descripcion": "Se me cobr√≥ un valor adicional que no corresponde seg√∫n la tarifa oficial publicada. Solicito revisi√≥n y reembolso.",
            "nombre_solicitante": "Ana Patricia Mart√≠nez",
            "email_solicitante": "ana.martinez@email.com",
            "telefono_solicitante": None,
            "estado": EstadoCaso.RESUELTO,
            "respuesta": "Se ha verificado el cobro y se proceder√° con el reembolso correspondiente. El valor ser√° devuelto en los pr√≥ximos 5 d√≠as h√°biles.",
            "fecha_creacion": datetime.now() - timedelta(days=10),
            "fecha_actualizacion": datetime.now() - timedelta(days=1)
        },
        {
            "numero_caso": "SUG-2025-004",
            "tipo": TipoCaso.SUGERENCIA,
            "asunto": "Implementar sistema de citas online",
            "descripcion": "Propongo implementar un sistema de citas por internet para evitar las largas filas y optimizar la atenci√≥n al ciudadano.",
            "nombre_solicitante": "Luis Fernando Hern√°ndez",
            "email_solicitante": "luis.hernandez@email.com",
            "telefono_solicitante": "3005555555",
            "estado": EstadoCaso.CERRADO,
            "respuesta": "Agradecemos su sugerencia. Hemos evaluado la propuesta y est√° siendo considerada para implementaci√≥n en el pr√≥ximo a√±o.",
            "fecha_creacion": datetime.now() - timedelta(days=7),
            "fecha_actualizacion": datetime.now() - timedelta(days=2)
        },
        {
            "numero_caso": "DEN-2025-005",
            "tipo": TipoCaso.DENUNCIA,
            "asunto": "Irregularidad en proceso de contrataci√≥n",
            "descripcion": "Reporto posibles irregularidades en el proceso de contrataci√≥n del proyecto de infraestructura municipal. Solicito investigaci√≥n.",
            "nombre_solicitante": "Ciudadano An√≥nimo",
            "email_solicitante": "anonimo@email.com",
            "telefono_solicitante": None,
            "estado": EstadoCaso.EN_PROCESO,
            "fecha_creacion": datetime.now() - timedelta(days=3)
        }
    ]
    
    try:
        # Obtener una sesi√≥n de base de datos
        with next(get_database_session()) as db:
            # Verificar si ya existen datos
            casos_existentes = db.query(Caso).count()
            if casos_existentes > 0:
                logger.info(f"‚ö†Ô∏è Ya existen {casos_existentes} casos en la base de datos")
                try:
                    respuesta = input("¬øAgregar datos de ejemplo de todas formas? (s/n): ")
                    if respuesta.lower() != 's':
                        logger.info("‚ùå Operaci√≥n cancelada por el usuario")
                        return True
                except KeyboardInterrupt:
                    logger.info("\n‚ùå Operaci√≥n cancelada por el usuario")
                    return True
            
            # Insertar casos con manejo de errores individual
            casos_insertados = 0
            for i, caso_data in enumerate(casos_ejemplo, 1):
                try:
                    caso = Caso(**caso_data)
                    db.add(caso)
                    casos_insertados += 1
                    logger.debug(f"   ‚úì Caso {i}/{len(casos_ejemplo)}: {caso_data['numero_caso']}")
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è Error insertando caso {i}: {e}")
                    continue
            
            # Guardar todos los cambios
            db.commit()
            
            logger.info(f"‚úÖ Se crearon {casos_insertados} casos de ejemplo exitosamente")
            
            # Mostrar resumen detallado
            total_casos = db.query(Caso).count()
            logger.info(f"üìä Total de casos en la base de datos: {total_casos}")
            
            # Mostrar estad√≠sticas por tipo
            for tipo in TipoCaso:
                count = db.query(Caso).filter(Caso.tipo == tipo).count()
                if count > 0:
                    logger.info(f"   üìã {tipo.value}: {count} caso(s)")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Error creando datos de ejemplo: {e}")
        return False

def mostrar_estado_base_de_datos() -> Dict[str, Any]:
    """
    Muestra informaci√≥n detallada sobre el estado actual de PostgreSQL.
    
    Returns:
        Dict[str, Any]: Diccionario con estad√≠sticas de la base de datos
    """
    logger.info("\nüìä ESTADO DE LA BASE DE DATOS POSTGRESQL")
    logger.info("=" * 60)
    
    estadisticas = {
        "conectividad": False,
        "total_casos": 0,
        "casos_por_tipo": {},
        "casos_por_estado": {},
        "casos_recientes": [],
        "info_servidor": {}
    }
    
    try:
        # Verificar conectividad y obtener informaci√≥n del servidor
        with engine.connect() as connection:
            # Informaci√≥n b√°sica del servidor PostgreSQL
            version_result = connection.execute(text("SELECT version()"))
            version = version_result.fetchone()[0]
            
            db_info_result = connection.execute(text(
                "SELECT current_database(), current_user, "
                "pg_size_pretty(pg_database_size(current_database())), "
                "inet_server_addr(), inet_server_port()"
            ))
            db_info = db_info_result.fetchone()
            
            # Informaci√≥n de tablas
            tables_result = connection.execute(text(
                "SELECT COUNT(*) FROM information_schema.tables "
                "WHERE table_schema = 'public'"
            ))
            table_count = tables_result.fetchone()[0]
            
            estadisticas["conectividad"] = True
            estadisticas["info_servidor"] = {
                "version": version.split(',')[0],
                "database": db_info[0],
                "user": db_info[1],
                "size": db_info[2],
                "host": db_info[3] or 'localhost',
                "port": db_info[4] or 'N/A',
                "tables": table_count
            }
            
            logger.info(f"üîß Versi√≥n PostgreSQL: {estadisticas['info_servidor']['version']}")
            logger.info(f"üìã Base de datos: {estadisticas['info_servidor']['database']}")
            logger.info(f"üë§ Usuario: {estadisticas['info_servidor']['user']}")
            logger.info(f"üìè Tama√±o: {estadisticas['info_servidor']['size']}")
            logger.info(f"üåê Servidor: {estadisticas['info_servidor']['host']}:{estadisticas['info_servidor']['port']}")
            logger.info(f"üìä Tablas: {estadisticas['info_servidor']['tables']}")
        
        # Obtener sesi√≥n para consultas de datos
        db = next(get_database_session())
        
        try:
            # Contar casos por tipo
            logger.info("\nüìã CASOS POR TIPO:")
            for tipo in TipoCaso:
                count = db.query(Caso).filter(Caso.tipo == tipo).count()
                estadisticas["casos_por_tipo"][tipo.value] = count
                if count > 0:
                    logger.info(f"  üìå {tipo.value}: {count}")
            
            # Contar casos por estado
            logger.info("\nüîÑ CASOS POR ESTADO:")
            for estado in EstadoCaso:
                count = db.query(Caso).filter(Caso.estado == estado).count()
                estadisticas["casos_por_estado"][estado.value] = count
                if count > 0:
                    logger.info(f"  üî∏ {estado.value}: {count}")
            
            # Total de casos
            total_casos = db.query(Caso).count()
            estadisticas["total_casos"] = total_casos
            logger.info(f"\nüìä TOTAL DE CASOS: {total_casos}")
            
            # Casos recientes (√∫ltimos 5)
            if total_casos > 0:
                logger.info("\nüïí CASOS RECIENTES:")
                casos_recientes = (
                    db.query(Caso)
                    .order_by(Caso.fecha_creacion.desc())
                    .limit(5)
                    .all()
                )
                
                for caso in casos_recientes:
                    fecha_str = caso.fecha_creacion.strftime("%Y-%m-%d %H:%M")
                    caso_info = {
                        "numero": caso.numero_caso,
                        "tipo": caso.tipo.value,
                        "estado": caso.estado.value,
                        "fecha": fecha_str
                    }
                    estadisticas["casos_recientes"].append(caso_info)
                    logger.info(f"  üîπ {caso.numero_caso} - {caso.tipo.value} - {caso.estado.value} - {fecha_str}")
            
            # Estad√≠sticas adicionales de rendimiento
            if total_casos > 0:
                logger.info("\n‚ö° ESTAD√çSTICAS ADICIONALES:")
                
                # Casos por mes actual
                casos_mes_actual = db.query(Caso).filter(
                    Caso.fecha_creacion >= datetime.now().replace(day=1)
                ).count()
                logger.info(f"  üìÖ Casos este mes: {casos_mes_actual}")
                
                # Casos resueltos vs pendientes
                casos_resueltos = db.query(Caso).filter(
                    Caso.estado.in_([EstadoCaso.RESUELTO, EstadoCaso.CERRADO])
                ).count()
                casos_pendientes = total_casos - casos_resueltos
                logger.info(f"  ‚úÖ Casos resueltos: {casos_resueltos}")
                logger.info(f"  ‚è≥ Casos pendientes: {casos_pendientes}")
                
                if total_casos > 0:
                    porcentaje_resueltos = (casos_resueltos / total_casos) * 100
                    logger.info(f"  üìà Tasa de resoluci√≥n: {porcentaje_resueltos:.1f}%")
        
        finally:
            db.close()
    
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo informaci√≥n de la base de datos: {e}")
        estadisticas["error"] = str(e)
    
    logger.info("=" * 60)
    return estadisticas

def main():
    """
    Funci√≥n principal que maneja los argumentos de l√≠nea de comandos para PostgreSQL.
    """
    parser = argparse.ArgumentParser(
        description="Inicializador de Base de Datos PostgreSQL - Sistema PQRSD ESO",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üîß PREREQUISITOS PARA POSTGRESQL:
  1. PostgreSQL instalado y ejecut√°ndose
  2. Base de datos creada (ej: pqrsd_eso)
  3. Usuario con permisos de escritura
  4. Archivo .env configurado con credenciales

üìã EJEMPLOS DE USO:
  python init_db.py                     # Crear tablas en PostgreSQL
  python init_db.py --check              # Verificar conectividad
  python init_db.py --reset              # Resetear todas las tablas
  python init_db.py --examples           # Insertar datos de ejemplo
  python init_db.py --info               # Mostrar informaci√≥n detallada
  python init_db.py --reset --examples   # Resetear e insertar ejemplos
  python init_db.py --check --info       # Verificar y mostrar estado

üîí SEGURIDAD:
  - Las credenciales se leen desde variables de entorno
  - Nunca hardcodear passwords en el c√≥digo
  - Usar conexiones SSL en producci√≥n
        """
    )
    
    parser.add_argument(
        "--reset",
        action="store_true",
        help="‚ö†Ô∏è Resetear todas las tablas de PostgreSQL (elimina TODOS los datos)"
    )
    
    parser.add_argument(
        "--examples",
        action="store_true",
        help="üìù Insertar datos de ejemplo realistas en PostgreSQL"
    )
    
    parser.add_argument(
        "--info",
        action="store_true",
        help="üìä Mostrar informaci√≥n detallada de la base de datos PostgreSQL"
    )
    
    parser.add_argument(
        "--check",
        action="store_true",
        help="üîç Verificar conectividad a PostgreSQL y mostrar informaci√≥n del servidor"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="üîä Mostrar informaci√≥n detallada durante la ejecuci√≥n"
    )
    
    args = parser.parse_args()
    
    # Configurar nivel de logging seg√∫n verbosidad
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("üîä Modo verbose activado")
    
    logger.info("üöÄ INICIALIZADOR DE POSTGRESQL - Sistema PQRSD ESO")
    logger.info("=" * 70)
    
    # Variables para tracking de √©xito
    operaciones_exitosas = 0
    operaciones_totales = 0
    
    try:
        if args.check:
            # Verificar conectividad
            logger.info("üîç Verificando conectividad a PostgreSQL...")
            operaciones_totales += 1
            if verificar_conectividad():
                operaciones_exitosas += 1
            else:
                logger.error("‚ùå Fallo en la verificaci√≥n de conectividad")
                return False
        
        if args.info:
            # Solo mostrar informaci√≥n detallada
            logger.info("üìä Obteniendo informaci√≥n de la base de datos...")
            operaciones_totales += 1
            try:
                estadisticas = mostrar_estado_base_de_datos()
                if estadisticas.get("conectividad", False):
                    operaciones_exitosas += 1
                else:
                    logger.error("‚ùå No se pudo obtener informaci√≥n completa")
            except Exception as e:
                logger.error(f"‚ùå Error obteniendo informaci√≥n: {e}")
                
        elif args.reset:
            # Resetear base de datos
            logger.info("üîÑ Iniciando proceso de reseteo de PostgreSQL...")
            operaciones_totales += 1
            if resetear_base_de_datos():
                operaciones_exitosas += 1
                
                # Agregar ejemplos si se solicita
                if args.examples:
                    logger.info("\nüìù Insertando datos de ejemplo...")
                    operaciones_totales += 1
                    if crear_datos_de_ejemplo():
                        operaciones_exitosas += 1
                    else:
                        logger.error("‚ùå Fallo insertando datos de ejemplo")
            else:
                logger.error("‚ùå Fallo en el reseteo de la base de datos")
                
        else:
            # Crear/verificar base de datos normal
            logger.info("üîß Inicializando base de datos PostgreSQL...")
            operaciones_totales += 1
            if crear_base_de_datos():
                operaciones_exitosas += 1
                
                # Agregar ejemplos si se solicita
                if args.examples:
                    logger.info("\nüìù Insertando datos de ejemplo...")
                    operaciones_totales += 1
                    if crear_datos_de_ejemplo():
                        operaciones_exitosas += 1
                    else:
                        logger.error("‚ùå Fallo insertando datos de ejemplo")
            else:
                logger.error("‚ùå Fallo en la inicializaci√≥n de la base de datos")
        
        # Mostrar estado final si no es solo verificaci√≥n
        if not args.check and not args.info:
            logger.info("\nüìä Estado final de la base de datos:")
            try:
                mostrar_estado_base_de_datos()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è No se pudo mostrar el estado final: {e}")
        
        # Resumen de operaciones
        logger.info("\n" + "=" * 70)
        if operaciones_exitosas == operaciones_totales and operaciones_totales > 0:
            logger.info(f"‚úÖ Proceso completado exitosamente ({operaciones_exitosas}/{operaciones_totales} operaciones)")
            logger.info("üí° La base de datos PostgreSQL est√° lista para usar")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è Proceso completado con advertencias ({operaciones_exitosas}/{operaciones_totales} operaciones exitosas)")
            return False
        
    except KeyboardInterrupt:
        logger.info("\n‚ùå Proceso interrumpido por el usuario")
        return False
    except Exception as e:
        logger.error(f"\n‚ùå Error cr√≠tico durante la ejecuci√≥n: {e}")
        logger.error("üí° Verificar:")
        logger.error("   1. PostgreSQL est√° ejecut√°ndose")
        logger.error("   2. Credenciales en .env son correctas")
        logger.error("   3. Base de datos existe y usuario tiene permisos")
        return False

if __name__ == "__main__":
    # Configurar logging b√°sico
    logging.basicConfig(
        level=logging.INFO,
        format='%(message)s',
        handlers=[
            logging.StreamHandler()
        ]
    )
    
    # Ejecutar funci√≥n principal
    success = main()
    
    # Salir con c√≥digo apropiado
    sys.exit(0 if success else 1)