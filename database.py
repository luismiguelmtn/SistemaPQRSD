# -*- coding: utf-8 -*-
"""
Configuraci√≥n de Base de Datos PostgreSQL para el Sistema PQRSD

Este archivo configura la conexi√≥n a PostgreSQL usando SQLAlchemy con variables de entorno
para mayor seguridad y flexibilidad en diferentes entornos (desarrollo, testing, producci√≥n).

¬øQu√© hace este archivo?
1. Carga configuraci√≥n de PostgreSQL desde variables de entorno
2. Crea el "motor" de base de datos (engine) con pool de conexiones
3. Configura las sesiones para interactuar con la base de datos
4. Proporciona funciones seguras para obtener conexiones a la base de datos
5. Incluye validaci√≥n de configuraci√≥n y manejo de errores

¬øQu√© es cada componente?

- ENGINE: Motor que maneja el pool de conexiones a PostgreSQL
- SESSION: Sesi√≥n transaccional para operaciones con la base de datos
- BASE: Clase base declarativa para todos los modelos ORM

Ventajas de PostgreSQL sobre SQLite:
- Soporte para m√∫ltiples usuarios concurrentes
- Transacciones ACID completas
- Tipos de datos avanzados (JSON, Arrays, etc.)
- Mejor rendimiento en aplicaciones de producci√≥n
- Funciones y procedimientos almacenados
- Replicaci√≥n y alta disponibilidad
"""

from sqlalchemy import create_engine, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import QueuePool
import os
from dotenv import load_dotenv
import logging
from typing import Generator

# ============================================================================
# CONFIGURACI√ìN DE LA BASE DE DATOS POSTGRESQL
# ============================================================================

# Cargar variables de entorno desde archivo .env (si existe)
load_dotenv()

# Configurar logging para debugging de base de datos
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Variables de entorno para configuraci√≥n de PostgreSQL
# Estas deben estar definidas en el archivo .env o en el sistema
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "5432")
DB_NAME = os.getenv("DB_NAME", "pqrsd_sistema")
DB_USER = os.getenv("DB_USER", "postgres")
DB_PASSWORD = os.getenv("DB_PASSWORD", "")

# Validar que las variables cr√≠ticas est√©n configuradas
if not DB_PASSWORD:
    logger.warning("‚ö†Ô∏è  DB_PASSWORD no est√° configurada. Usando valor por defecto (no recomendado para producci√≥n)")
    DB_PASSWORD = "postgres"

# Construir URL de conexi√≥n a PostgreSQL
# Formato: postgresql://usuario:contrase√±a@host:puerto/nombre_base_datos
DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

# Configuraci√≥n del motor de base de datos con pool de conexiones
# Pool de conexiones mejora el rendimiento reutilizando conexiones
engine = create_engine(
    DATABASE_URL,
    poolclass=QueuePool,          # Tipo de pool de conexiones
    pool_size=10,                 # N√∫mero de conexiones permanentes en el pool
    max_overflow=20,              # Conexiones adicionales permitidas
    pool_pre_ping=True,           # Verificar conexiones antes de usarlas
    pool_recycle=3600,            # Reciclar conexiones cada hora
    echo=os.getenv("DB_ECHO", "false").lower() == "true"  # Mostrar SQL en consola
)

# Crear una "f√°brica" de sesiones
# Una sesi√≥n es como una "conversaci√≥n" con la base de datos
# autocommit=False: Los cambios no se guardan autom√°ticamente (m√°s seguro)
# autoflush=False: Los cambios no se env√≠an autom√°ticamente a la base de datos
SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine
)

# Crear la clase base para todos los modelos
# Todos los modelos de tablas heredar√°n de esta clase
Base = declarative_base()

# ============================================================================
# FUNCIONES AUXILIARES
# ============================================================================

def get_database_session() -> Generator:
    """
    Generador de sesiones de base de datos PostgreSQL con manejo autom√°tico de recursos.
    
    Esta funci√≥n es un generador que:
    1. Crea una nueva sesi√≥n de base de datos
    2. La entrega para su uso (yield)
    3. Autom√°ticamente la cierra al finalizar
    4. Maneja errores y rollbacks autom√°ticamente
    
    Uso t√≠pico en FastAPI:
    ```python
    def get_casos(db: Session = Depends(get_db)):
        return db.query(Caso).all()
    ```
    
    Yields:
        Session: Sesi√≥n de SQLAlchemy lista para usar
        
    Raises:
        SQLAlchemyError: Si hay problemas de conexi√≥n o transacci√≥n
    """
    db = SessionLocal()
    try:
        yield db
        # Si llegamos aqu√≠, todo sali√≥ bien, hacer commit
        db.commit()
    except Exception as e:
        # Si hay error, hacer rollback para mantener consistencia
        db.rollback()
        logger.error(f"Error en sesi√≥n de base de datos: {e}")
        raise
    finally:
        # Siempre cerrar la sesi√≥n para liberar la conexi√≥n
        db.close()


# Alias para compatibilidad con FastAPI Depends
get_db = get_database_session


def get_database_session_old() -> Generator:
    """
    Obtiene una nueva sesi√≥n de base de datos PostgreSQL con manejo seguro de conexiones.
    
    ¬øQu√© es una sesi√≥n?
    Una sesi√≥n es como abrir un "canal de comunicaci√≥n" transaccional con PostgreSQL.
    A trav√©s de la sesi√≥n puedes:
    - Hacer consultas (SELECT) con aislamiento transaccional
    - Insertar datos (INSERT) con validaci√≥n de integridad
    - Actualizar datos (UPDATE) con bloqueos optimistas
    - Eliminar datos (DELETE) con verificaci√≥n de restricciones
    
    ¬øPor qu√© usar yield en lugar de return?
    yield convierte esta funci√≥n en un "generador", lo que permite:
    - Abrir la sesi√≥n y iniciar una transacci√≥n
    - Entregar la sesi√≥n para que la uses
    - Autom√°ticamente hacer commit/rollback seg√∫n el resultado
    - Cerrar la sesi√≥n y liberar la conexi√≥n al pool
    
    Ventajas del patr√≥n generador:
    - Garantiza liberaci√≥n de recursos
    - Manejo autom√°tico de transacciones
    - Previene memory leaks
    - Integraci√≥n con context managers
    
    Uso t√≠pico:
    ```python
    with get_database_session() as db:
        # Operaciones con la base de datos
        # Commit autom√°tico si no hay errores
    ```
    
    Returns:
        Generator: Generador que produce una sesi√≥n de SQLAlchemy
    
    Raises:
        SQLAlchemyError: Si hay problemas de conexi√≥n o transacci√≥n
    """
    db = SessionLocal()
    try:
        yield db  # Entrega la sesi√≥n para usar
    except Exception as e:
        # En caso de error, hacer rollback de la transacci√≥n
        db.rollback()
        logger.error(f"Error en sesi√≥n de base de datos: {e}")
        raise
    finally:
        # Siempre cerrar la sesi√≥n para liberar la conexi√≥n
        db.close()

def create_tables():
    """
    Crea todas las tablas en la base de datos PostgreSQL.
    
    ¬øQu√© hace esta funci√≥n?
    1. Conecta a PostgreSQL usando las credenciales configuradas
    2. Toma todos los modelos que heredan de Base (ORM models)
    3. Genera y ejecuta comandos CREATE TABLE en PostgreSQL
    4. Crea √≠ndices, restricciones y relaciones definidas en los modelos
    5. Si las tablas ya existen, las omite (idempotente)
    
    Ventajas de PostgreSQL:
    - Soporte para tipos de datos avanzados (JSONB, Arrays, UUID)
    - Restricciones de integridad referencial robustas
    - √çndices parciales y funcionales
    - Secuencias autom√°ticas para claves primarias
    
    Ejemplo:
    Si tienes un modelo llamado "Caso", esta funci√≥n crear√°:
    - Tabla "casos" con todas las columnas definidas
    - Secuencia para el ID autoincremental
    - √çndices en campos marcados como index=True
    - Restricciones de clave for√°nea
    
    Raises:
        SQLAlchemyError: Si hay problemas de conexi√≥n o permisos
    """
    try:
        # Importar todos los modelos aqu√≠ para que SQLAlchemy los conozca
        # Esto es necesario para que create_all() sepa qu√© tablas crear
        from db_models import Caso  # Importamos despu√©s para evitar imports circulares
        
        logger.info("üèóÔ∏è  Creando tablas en PostgreSQL...")
        # Crear todas las tablas definidas en los modelos
        Base.metadata.create_all(bind=engine)
        logger.info(f"‚úÖ Tablas creadas exitosamente en PostgreSQL: {DB_NAME}")
    except Exception as e:
        logger.error(f"‚ùå Error creando tablas: {e}")
        raise

def drop_tables():
    """
    Elimina todas las tablas de la base de datos PostgreSQL.
    
    ‚ö†Ô∏è CUIDADO: Esta funci√≥n elimina TODOS los datos y estructura.
    
    ¬øQu√© hace exactamente?
    1. Conecta a PostgreSQL
    2. Ejecuta DROP TABLE CASCADE para cada tabla
    3. Elimina secuencias, √≠ndices y restricciones asociadas
    4. Libera el espacio ocupado en el servidor
    
    Solo usar en desarrollo para resetear la base de datos.
    NUNCA usar en producci√≥n a menos que sepas exactamente lo que haces.
    
    En PostgreSQL, esta operaci√≥n:
    - Es transaccional (se puede hacer rollback)
    - Respeta restricciones de clave for√°nea
    - Elimina autom√°ticamente √≠ndices y secuencias
    
    Raises:
        SQLAlchemyError: Si hay problemas de conexi√≥n o permisos
    """
    try:
        logger.warning("‚ö†Ô∏è Eliminando todas las tablas de PostgreSQL...")
        Base.metadata.drop_all(bind=engine)
        logger.warning("‚ö†Ô∏è Todas las tablas han sido eliminadas de PostgreSQL")
    except Exception as e:
        logger.error(f"‚ùå Error eliminando tablas: {e}")
        raise

def database_exists() -> bool:
    """
    Verifica si la base de datos PostgreSQL existe y es accesible.
    
    A diferencia de SQLite (que es un archivo), PostgreSQL es un servidor
    de base de datos, por lo que verificamos:
    1. Conectividad al servidor PostgreSQL
    2. Existencia de la base de datos espec√≠fica
    3. Permisos de acceso
    
    Returns:
        bool: True si la base de datos existe y es accesible, False si no.
    """
    try:
        # Intentar conectar y hacer una consulta simple
        with engine.connect() as connection:
            # Verificar que podemos ejecutar una consulta b√°sica
            result = connection.execute(text("SELECT 1"))
            return result.fetchone() is not None
    except Exception as e:
        logger.error(f"No se puede conectar a la base de datos PostgreSQL: {e}")
        return False

def get_database_info() -> dict:
    """
    Obtiene informaci√≥n detallada sobre la base de datos PostgreSQL.
    
    Recopila informaci√≥n del servidor PostgreSQL incluyendo:
    - Configuraci√≥n de conexi√≥n
    - Estado de conectividad
    - Versi√≥n del servidor
    - Tama√±o de la base de datos
    - N√∫mero de tablas
    
    Returns:
        dict: Informaci√≥n completa sobre la base de datos PostgreSQL
    """
    info = {
        "database_name": DB_NAME,
        "database_host": DB_HOST,
        "database_port": DB_PORT,
        "database_user": DB_USER,
        "database_url": DATABASE_URL.replace(DB_PASSWORD, "***"),  # Ocultar contrase√±a
        "exists": database_exists(),
        "server_version": None,
        "database_size_mb": 0,
        "table_count": 0,
        "connection_pool_size": engine.pool.size(),
        "connection_pool_overflow": engine.pool.overflow()
    }
    
    if info["exists"]:
        try:
            with engine.connect() as connection:
                # Obtener versi√≥n del servidor PostgreSQL
                version_result = connection.execute(text("SELECT version()"))
                info["server_version"] = version_result.fetchone()[0]
                
                # Obtener tama√±o de la base de datos
                size_query = text(
                    "SELECT pg_size_pretty(pg_database_size(:db_name)) as size, "
                    "pg_database_size(:db_name) as size_bytes"
                )
                size_result = connection.execute(size_query, {"db_name": DB_NAME})
                size_row = size_result.fetchone()
                if size_row:
                    info["database_size_pretty"] = size_row[0]
                    info["database_size_mb"] = round(size_row[1] / (1024 * 1024), 2)
                
                # Contar n√∫mero de tablas
                table_query = text(
                    "SELECT COUNT(*) FROM information_schema.tables "
                    "WHERE table_schema = 'public'"
                )
                table_result = connection.execute(table_query)
                info["table_count"] = table_result.fetchone()[0]
                
        except Exception as e:
            logger.error(f"Error obteniendo informaci√≥n de la base de datos: {e}")
            info["error"] = str(e)
    
    return info

# ============================================================================
# INFORMACI√ìN PARA DEBUGGING
# ============================================================================

if __name__ == "__main__":
    # Este c√≥digo solo se ejecuta si ejecutas este archivo directamente
    # python database.py
    
    print("üîß Configuraci√≥n de Base de Datos PostgreSQL")
    print(f"üè¢ Servidor: {DB_HOST}:{DB_PORT}")
    print(f"üóÑÔ∏è Base de datos: {DB_NAME}")
    print(f"üë§ Usuario: {DB_USER}")
    print(f"üîó URL: {DATABASE_URL.replace(DB_PASSWORD, '***')}")
    
    # Informaci√≥n detallada de la base de datos
    print("\nüìä Informaci√≥n de la base de datos:")
    db_info = get_database_info()
    for key, value in db_info.items():
        print(f"   {key}: {value}")
    
    # Ejemplo de c√≥mo usar la sesi√≥n
    print("\nüß™ Probando conexi√≥n a PostgreSQL...")
    try:
        with next(get_database_session()) as db:
            print("‚úÖ Conexi√≥n exitosa a PostgreSQL")
            # Probar una consulta simple
            result = db.execute(text("SELECT current_database(), current_user, version()"))
            row = result.fetchone()
            print(f"   üìã Base de datos actual: {row[0]}")
            print(f"   üë§ Usuario actual: {row[1]}")
            print(f"   üîß Versi√≥n: {row[2][:50]}...")
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n a PostgreSQL: {e}")
        print("\nüí° Posibles soluciones:")
        print("   1. Verificar que PostgreSQL est√© ejecut√°ndose")
        print("   2. Verificar credenciales en el archivo .env")
        print("   3. Verificar que la base de datos exista")
        print("   4. Verificar permisos del usuario")